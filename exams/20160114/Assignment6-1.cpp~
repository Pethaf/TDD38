#include <iostream>
#include <vector>
#include <string>
using std:cout;
using std::endl;
using std::vector;
using std::string;

class Grill
{
public:
  string get__model() const { return model;}
  double get__price() const { return price; }
  void set__price(double newPrice) { price=newPrice;  } //This member function should really do a sanity check and throw a range_error
  Grill* clone() const { return getClone(); }
protected:
  Grill(const Grill&) const = default;
  Grill(const string model_,const double price): model(model_), price(price_) { } 
  string model;
  double price;
private:
   Grill& operator=(const Grill& other) = delete;
   virtual Grill* getClone() const = 0; 
}
