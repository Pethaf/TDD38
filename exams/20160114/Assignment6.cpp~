#include <vector>
#include <iostream>
#include <string>

using std::vector;
using std::iostream;
using std::string; 

class Grill
{
public:
  Grill() = default;
  virtual ~Grill() = default;
  Grill* clone() const { return get_clone(); }
  string get__model() const { return getModel(); }
  double get__price() const { return getPrice(); }
  void set_price(double newPrice) { price = newPrice; } //This member function should probably do a sanity check on the new price and throw a range_error exception.
protected:
  Grill(const Grill&) = default;
private:
  string model; 
  double price;
  virtual get_clone() const = 0; 
  virtual string getModel() const = 0;
  virtual double getPrice() const = 0; 
};

class Grill_charcoal: public Grill
{
public:
  Grill_charcoal(string model_, double price ): model(model_) {setPrice(price); }
  virtual ~Grill_charcoal() = default;
protected:
  Grill_charcoal(const Grill_charcoal&) = default;
private:
  
};
